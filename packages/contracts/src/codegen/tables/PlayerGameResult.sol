// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("PlayerGameResult")));
bytes32 constant PlayerGameResultTableId = _tableId;

struct PlayerGameResultData {
  int32 rank;
  int32 points;
  int8 gpu;
  int8 bitcoin;
  int8 battery;
  int8 leiter;
  int8 gold;
  int8 oil;
}

library PlayerGameResult {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](8);
    _schema[0] = SchemaType.INT32;
    _schema[1] = SchemaType.INT32;
    _schema[2] = SchemaType.INT8;
    _schema[3] = SchemaType.INT8;
    _schema[4] = SchemaType.INT8;
    _schema[5] = SchemaType.INT8;
    _schema[6] = SchemaType.INT8;
    _schema[7] = SchemaType.INT8;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "rank";
    fieldNames[1] = "points";
    fieldNames[2] = "gpu";
    fieldNames[3] = "bitcoin";
    fieldNames[4] = "battery";
    fieldNames[5] = "leiter";
    fieldNames[6] = "gold";
    fieldNames[7] = "oil";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get rank */
  function getRank(bytes32 key) internal view returns (int32 rank) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get rank (using the specified store) */
  function getRank(IStore _store, bytes32 key) internal view returns (int32 rank) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set rank */
  function setRank(bytes32 key, int32 rank) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((rank)), getValueSchema());
  }

  /** Set rank (using the specified store) */
  function setRank(IStore _store, bytes32 key, int32 rank) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((rank)), getValueSchema());
  }

  /** Get points */
  function getPoints(bytes32 key) internal view returns (int32 points) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Get points (using the specified store) */
  function getPoints(IStore _store, bytes32 key) internal view returns (int32 points) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (int32(uint32(Bytes.slice4(_blob, 0))));
  }

  /** Set points */
  function setPoints(bytes32 key, int32 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((points)), getValueSchema());
  }

  /** Set points (using the specified store) */
  function setPoints(IStore _store, bytes32 key, int32 points) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((points)), getValueSchema());
  }

  /** Get gpu */
  function getGpu(bytes32 key) internal view returns (int8 gpu) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gpu (using the specified store) */
  function getGpu(IStore _store, bytes32 key) internal view returns (int8 gpu) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gpu */
  function setGpu(bytes32 key, int8 gpu) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((gpu)), getValueSchema());
  }

  /** Set gpu (using the specified store) */
  function setGpu(IStore _store, bytes32 key, int8 gpu) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((gpu)), getValueSchema());
  }

  /** Get bitcoin */
  function getBitcoin(bytes32 key) internal view returns (int8 bitcoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get bitcoin (using the specified store) */
  function getBitcoin(IStore _store, bytes32 key) internal view returns (int8 bitcoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set bitcoin */
  function setBitcoin(bytes32 key, int8 bitcoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((bitcoin)), getValueSchema());
  }

  /** Set bitcoin (using the specified store) */
  function setBitcoin(IStore _store, bytes32 key, int8 bitcoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((bitcoin)), getValueSchema());
  }

  /** Get battery */
  function getBattery(bytes32 key) internal view returns (int8 battery) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get battery (using the specified store) */
  function getBattery(IStore _store, bytes32 key) internal view returns (int8 battery) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set battery */
  function setBattery(bytes32 key, int8 battery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((battery)), getValueSchema());
  }

  /** Set battery (using the specified store) */
  function setBattery(IStore _store, bytes32 key, int8 battery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((battery)), getValueSchema());
  }

  /** Get leiter */
  function getLeiter(bytes32 key) internal view returns (int8 leiter) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get leiter (using the specified store) */
  function getLeiter(IStore _store, bytes32 key) internal view returns (int8 leiter) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set leiter */
  function setLeiter(bytes32 key, int8 leiter) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((leiter)), getValueSchema());
  }

  /** Set leiter (using the specified store) */
  function setLeiter(IStore _store, bytes32 key, int8 leiter) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((leiter)), getValueSchema());
  }

  /** Get gold */
  function getGold(bytes32 key) internal view returns (int8 gold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get gold (using the specified store) */
  function getGold(IStore _store, bytes32 key) internal view returns (int8 gold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set gold */
  function setGold(bytes32 key, int8 gold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((gold)), getValueSchema());
  }

  /** Set gold (using the specified store) */
  function setGold(IStore _store, bytes32 key, int8 gold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((gold)), getValueSchema());
  }

  /** Get oil */
  function getOil(bytes32 key) internal view returns (int8 oil) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get oil (using the specified store) */
  function getOil(IStore _store, bytes32 key) internal view returns (int8 oil) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 7, getValueSchema());
    return (int8(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set oil */
  function setOil(bytes32 key, int8 oil) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 7, abi.encodePacked((oil)), getValueSchema());
  }

  /** Set oil (using the specified store) */
  function setOil(IStore _store, bytes32 key, int8 oil) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 7, abi.encodePacked((oil)), getValueSchema());
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (PlayerGameResultData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (PlayerGameResultData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    int32 rank,
    int32 points,
    int8 gpu,
    int8 bitcoin,
    int8 battery,
    int8 leiter,
    int8 gold,
    int8 oil
  ) internal {
    bytes memory _data = encode(rank, points, gpu, bitcoin, battery, leiter, gold, oil);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    int32 rank,
    int32 points,
    int8 gpu,
    int8 bitcoin,
    int8 battery,
    int8 leiter,
    int8 gold,
    int8 oil
  ) internal {
    bytes memory _data = encode(rank, points, gpu, bitcoin, battery, leiter, gold, oil);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, PlayerGameResultData memory _table) internal {
    set(
      key,
      _table.rank,
      _table.points,
      _table.gpu,
      _table.bitcoin,
      _table.battery,
      _table.leiter,
      _table.gold,
      _table.oil
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, PlayerGameResultData memory _table) internal {
    set(
      _store,
      key,
      _table.rank,
      _table.points,
      _table.gpu,
      _table.bitcoin,
      _table.battery,
      _table.leiter,
      _table.gold,
      _table.oil
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (PlayerGameResultData memory _table) {
    _table.rank = (int32(uint32(Bytes.slice4(_blob, 0))));

    _table.points = (int32(uint32(Bytes.slice4(_blob, 4))));

    _table.gpu = (int8(uint8(Bytes.slice1(_blob, 8))));

    _table.bitcoin = (int8(uint8(Bytes.slice1(_blob, 9))));

    _table.battery = (int8(uint8(Bytes.slice1(_blob, 10))));

    _table.leiter = (int8(uint8(Bytes.slice1(_blob, 11))));

    _table.gold = (int8(uint8(Bytes.slice1(_blob, 12))));

    _table.oil = (int8(uint8(Bytes.slice1(_blob, 13))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int32 rank,
    int32 points,
    int8 gpu,
    int8 bitcoin,
    int8 battery,
    int8 leiter,
    int8 gold,
    int8 oil
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(rank, points, gpu, bitcoin, battery, leiter, gold, oil);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
