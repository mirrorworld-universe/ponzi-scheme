// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Player")));
bytes32 constant PlayerTableId = _tableId;

struct PlayerData {
  uint256 gameId;
  uint32 state;
  uint32 money;
  uint256 x;
  uint256 y;
}

library Player {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](5);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT256;
    _schema[4] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "gameId";
    fieldNames[1] = "state";
    fieldNames[2] = "money";
    fieldNames[3] = "x";
    fieldNames[4] = "y";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get gameId */
  function getGameId(bytes32 key) internal view returns (uint256 gameId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get gameId (using the specified store) */
  function getGameId(IStore _store, bytes32 key) internal view returns (uint256 gameId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set gameId */
  function setGameId(bytes32 key, uint256 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((gameId)), getValueSchema());
  }

  /** Set gameId (using the specified store) */
  function setGameId(IStore _store, bytes32 key, uint256 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((gameId)), getValueSchema());
  }

  /** Get state */
  function getState(bytes32 key) internal view returns (uint32 state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get state (using the specified store) */
  function getState(IStore _store, bytes32 key) internal view returns (uint32 state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set state */
  function setState(bytes32 key, uint32 state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((state)), getValueSchema());
  }

  /** Set state (using the specified store) */
  function setState(IStore _store, bytes32 key, uint32 state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((state)), getValueSchema());
  }

  /** Get money */
  function getMoney(bytes32 key) internal view returns (uint32 money) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get money (using the specified store) */
  function getMoney(IStore _store, bytes32 key) internal view returns (uint32 money) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set money */
  function setMoney(bytes32 key, uint32 money) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((money)), getValueSchema());
  }

  /** Set money (using the specified store) */
  function setMoney(IStore _store, bytes32 key, uint32 money) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((money)), getValueSchema());
  }

  /** Get x */
  function getX(bytes32 key) internal view returns (uint256 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get x (using the specified store) */
  function getX(IStore _store, bytes32 key) internal view returns (uint256 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set x */
  function setX(bytes32 key, uint256 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((x)), getValueSchema());
  }

  /** Set x (using the specified store) */
  function setX(IStore _store, bytes32 key, uint256 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((x)), getValueSchema());
  }

  /** Get y */
  function getY(bytes32 key) internal view returns (uint256 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get y (using the specified store) */
  function getY(IStore _store, bytes32 key) internal view returns (uint256 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set y */
  function setY(bytes32 key, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((y)), getValueSchema());
  }

  /** Set y (using the specified store) */
  function setY(IStore _store, bytes32 key, uint256 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((y)), getValueSchema());
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, uint256 gameId, uint32 state, uint32 money, uint256 x, uint256 y) internal {
    bytes memory _data = encode(gameId, state, money, x, y);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, bytes32 key, uint256 gameId, uint32 state, uint32 money, uint256 x, uint256 y) internal {
    bytes memory _data = encode(gameId, state, money, x, y);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, PlayerData memory _table) internal {
    set(key, _table.gameId, _table.state, _table.money, _table.x, _table.y);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, PlayerData memory _table) internal {
    set(_store, key, _table.gameId, _table.state, _table.money, _table.x, _table.y);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (PlayerData memory _table) {
    _table.gameId = (uint256(Bytes.slice32(_blob, 0)));

    _table.state = (uint32(Bytes.slice4(_blob, 32)));

    _table.money = (uint32(Bytes.slice4(_blob, 36)));

    _table.x = (uint256(Bytes.slice32(_blob, 40)));

    _table.y = (uint256(Bytes.slice32(_blob, 72)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 gameId,
    uint32 state,
    uint32 money,
    uint256 x,
    uint256 y
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(gameId, state, money, x, y);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
