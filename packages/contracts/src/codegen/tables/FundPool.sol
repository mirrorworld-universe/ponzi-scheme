// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("FundPool")));
bytes32 constant FundPoolTableId = _tableId;

struct FundPoolData {
  uint256 placeHolder;
  uint16[9] array;
}

library FundPool {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT16_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](2);
    fieldNames[0] = "placeHolder";
    fieldNames[1] = "array";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get placeHolder */
  function getPlaceHolder() internal view returns (uint256 placeHolder) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get placeHolder (using the specified store) */
  function getPlaceHolder(IStore _store) internal view returns (uint256 placeHolder) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set placeHolder */
  function setPlaceHolder(uint256 placeHolder) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((placeHolder)), getValueSchema());
  }

  /** Set placeHolder (using the specified store) */
  function setPlaceHolder(IStore _store, uint256 placeHolder) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((placeHolder)), getValueSchema());
  }

  /** Get array */
  function getArray() internal view returns (uint16[9] memory array) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return toStaticArray_uint16_9(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint16());
  }

  /** Get array (using the specified store) */
  function getArray(IStore _store) internal view returns (uint16[9] memory array) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return toStaticArray_uint16_9(SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint16());
  }

  /** Set array */
  function setArray(uint16[9] memory array) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint16_9(array)), getValueSchema());
  }

  /** Set array (using the specified store) */
  function setArray(IStore _store, uint16[9] memory array) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, EncodeArray.encode(fromStaticArray_uint16_9(array)), getValueSchema());
  }

  /** Get the length of array */
  function lengthArray() internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getValueSchema());
    unchecked {
      return _byteLength / 2;
    }
  }

  /** Get the length of array (using the specified store) */
  function lengthArray(IStore _store) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getValueSchema());
    unchecked {
      return _byteLength / 2;
    }
  }

  /**
   * Get an item of array
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemArray(uint256 _index) internal view returns (uint16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        1,
        getValueSchema(),
        _index * 2,
        (_index + 1) * 2
      );
      return (uint16(Bytes.slice2(_blob, 0)));
    }
  }

  /**
   * Get an item of array (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemArray(IStore _store, uint256 _index) internal view returns (uint16) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getValueSchema(), _index * 2, (_index + 1) * 2);
      return (uint16(Bytes.slice2(_blob, 0)));
    }
  }

  /** Push an element to array */
  function pushArray(uint16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to array (using the specified store) */
  function pushArray(IStore _store, uint16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.pushToField(_tableId, _keyTuple, 1, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from array */
  function popArray() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 2, getValueSchema());
  }

  /** Pop an element from array (using the specified store) */
  function popArray(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.popFromField(_tableId, _keyTuple, 1, 2, getValueSchema());
  }

  /**
   * Update an element of array at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateArray(uint256 _index, uint16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 2, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of array (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateArray(IStore _store, uint256 _index, uint16 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 1, _index * 2, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get the full data */
  function get() internal view returns (FundPoolData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store) internal view returns (FundPoolData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint256 placeHolder, uint16[9] memory array) internal {
    bytes memory _data = encode(placeHolder, array);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint256 placeHolder, uint16[9] memory array) internal {
    bytes memory _data = encode(placeHolder, array);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(FundPoolData memory _table) internal {
    set(_table.placeHolder, _table.array);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, FundPoolData memory _table) internal {
    set(_store, _table.placeHolder, _table.array);
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (FundPoolData memory _table) {
    // 32 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 32));

    _table.placeHolder = (uint256(Bytes.slice32(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 32) {
      // skip static data length + dynamic lengths word
      uint256 _start = 64;
      uint256 _end;
      unchecked {
        _end = 64 + _encodedLengths.atIndex(0);
      }
      _table.array = toStaticArray_uint16_9(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint16());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint256 placeHolder, uint16[9] memory array) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(array.length * 2);
    }

    return abi.encodePacked(placeHolder, _encodedLengths.unwrap(), EncodeArray.encode(fromStaticArray_uint16_9(array)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}

function toStaticArray_uint16_9(uint16[] memory _value) pure returns (uint16[9] memory _result) {
  // in memory static arrays are just dynamic arrays without the length byte
  assembly {
    _result := add(_value, 0x20)
  }
}

function fromStaticArray_uint16_9(uint16[9] memory _value) pure returns (uint16[] memory _result) {
  _result = new uint16[](9);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 288);
}
