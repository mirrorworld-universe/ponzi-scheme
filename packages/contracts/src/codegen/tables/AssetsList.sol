// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("AssetsList")))
);
ResourceId constant AssetsListTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0006060001010101010100000000000000000000000000000000000000000000
);

struct AssetsListData {
  int8 gpu;
  int8 bitcoin;
  int8 battery;
  int8 leiter;
  int8 gold;
  int8 oil;
}

library AssetsList {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.INT8;
    _valueSchema[1] = SchemaType.INT8;
    _valueSchema[2] = SchemaType.INT8;
    _valueSchema[3] = SchemaType.INT8;
    _valueSchema[4] = SchemaType.INT8;
    _valueSchema[5] = SchemaType.INT8;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "gpu";
    fieldNames[1] = "bitcoin";
    fieldNames[2] = "battery";
    fieldNames[3] = "leiter";
    fieldNames[4] = "gold";
    fieldNames[5] = "oil";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get gpu.
   */
  function getGpu(bytes32 key) internal view returns (int8 gpu) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get gpu.
   */
  function _getGpu(bytes32 key) internal view returns (int8 gpu) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set gpu.
   */
  function setGpu(bytes32 key, int8 gpu) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((gpu)), _fieldLayout);
  }

  /**
   * @notice Set gpu.
   */
  function _setGpu(bytes32 key, int8 gpu) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((gpu)), _fieldLayout);
  }

  /**
   * @notice Get bitcoin.
   */
  function getBitcoin(bytes32 key) internal view returns (int8 bitcoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get bitcoin.
   */
  function _getBitcoin(bytes32 key) internal view returns (int8 bitcoin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set bitcoin.
   */
  function setBitcoin(bytes32 key, int8 bitcoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((bitcoin)), _fieldLayout);
  }

  /**
   * @notice Set bitcoin.
   */
  function _setBitcoin(bytes32 key, int8 bitcoin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((bitcoin)), _fieldLayout);
  }

  /**
   * @notice Get battery.
   */
  function getBattery(bytes32 key) internal view returns (int8 battery) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get battery.
   */
  function _getBattery(bytes32 key) internal view returns (int8 battery) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set battery.
   */
  function setBattery(bytes32 key, int8 battery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((battery)), _fieldLayout);
  }

  /**
   * @notice Set battery.
   */
  function _setBattery(bytes32 key, int8 battery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((battery)), _fieldLayout);
  }

  /**
   * @notice Get leiter.
   */
  function getLeiter(bytes32 key) internal view returns (int8 leiter) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get leiter.
   */
  function _getLeiter(bytes32 key) internal view returns (int8 leiter) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set leiter.
   */
  function setLeiter(bytes32 key, int8 leiter) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((leiter)), _fieldLayout);
  }

  /**
   * @notice Set leiter.
   */
  function _setLeiter(bytes32 key, int8 leiter) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((leiter)), _fieldLayout);
  }

  /**
   * @notice Get gold.
   */
  function getGold(bytes32 key) internal view returns (int8 gold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get gold.
   */
  function _getGold(bytes32 key) internal view returns (int8 gold) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set gold.
   */
  function setGold(bytes32 key, int8 gold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((gold)), _fieldLayout);
  }

  /**
   * @notice Set gold.
   */
  function _setGold(bytes32 key, int8 gold) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((gold)), _fieldLayout);
  }

  /**
   * @notice Get oil.
   */
  function getOil(bytes32 key) internal view returns (int8 oil) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get oil.
   */
  function _getOil(bytes32 key) internal view returns (int8 oil) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int8(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set oil.
   */
  function setOil(bytes32 key, int8 oil) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((oil)), _fieldLayout);
  }

  /**
   * @notice Set oil.
   */
  function _setOil(bytes32 key, int8 oil) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((oil)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 key) internal view returns (AssetsListData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 key) internal view returns (AssetsListData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 key, int8 gpu, int8 bitcoin, int8 battery, int8 leiter, int8 gold, int8 oil) internal {
    bytes memory _staticData = encodeStatic(gpu, bitcoin, battery, leiter, gold, oil);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 key, int8 gpu, int8 bitcoin, int8 battery, int8 leiter, int8 gold, int8 oil) internal {
    bytes memory _staticData = encodeStatic(gpu, bitcoin, battery, leiter, gold, oil);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 key, AssetsListData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.gpu,
      _table.bitcoin,
      _table.battery,
      _table.leiter,
      _table.gold,
      _table.oil
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 key, AssetsListData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.gpu,
      _table.bitcoin,
      _table.battery,
      _table.leiter,
      _table.gold,
      _table.oil
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (int8 gpu, int8 bitcoin, int8 battery, int8 leiter, int8 gold, int8 oil) {
    gpu = (int8(uint8(Bytes.slice1(_blob, 0))));

    bitcoin = (int8(uint8(Bytes.slice1(_blob, 1))));

    battery = (int8(uint8(Bytes.slice1(_blob, 2))));

    leiter = (int8(uint8(Bytes.slice1(_blob, 3))));

    gold = (int8(uint8(Bytes.slice1(_blob, 4))));

    oil = (int8(uint8(Bytes.slice1(_blob, 5))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (AssetsListData memory _table) {
    (_table.gpu, _table.bitcoin, _table.battery, _table.leiter, _table.gold, _table.oil) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    int8 gpu,
    int8 bitcoin,
    int8 battery,
    int8 leiter,
    int8 gold,
    int8 oil
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(gpu, bitcoin, battery, leiter, gold, oil);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int8 gpu,
    int8 bitcoin,
    int8 battery,
    int8 leiter,
    int8 gold,
    int8 oil
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(gpu, bitcoin, battery, leiter, gold, oil);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}
